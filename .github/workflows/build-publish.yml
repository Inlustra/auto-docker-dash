name: Release

on:
  push:
    branches:
      - main

jobs:
  getversion:
    name: "Generate Artifacts, Determine if build and bump needed"
    runs-on: ubuntu-latest
    outputs:
      shouldBuild: ${{ steps.determineVersion.outputs.shouldBuild }}
      version: ${{ steps.determineVersion.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Dry Run Release to determine version
        id: determineVersion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: add-bot
          GIT_AUTHOR_EMAIL: thomas@thenairn.com
          GIT_COMMITTER_NAME: add-bot
          GIT_COMMITTER_EMAIL: thomas@thenairn.com
        run: |
          yarn run semantic-release --dry-run --no-ci
          (test -e .VERSION && echo "::set-output name=shouldBuild::true") || echo "::set-output name=shouldBuild::false"
          echo "::set-output name=version::$(cat .VERSION)"
          echo "Determined next version to be: $(cat .VERSION)"

  buildcore:
    needs: getversion
    name: "Build Release Core"
    if: needs.getversion.outputs.shouldBuild
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-core-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-core-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # And make it available for the builds
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: packages/core/Dockerfile
          push: true
          tags: plugsy/core:${{ needs.getversion.outputs.version }},plugsy/core:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  buildagent:
    needs: getversion
    name: "Build Release Agent"
    if: needs.getversion.outputs.shouldBuild
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-agent-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-agent-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # And make it available for the builds
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: packages/agent/Dockerfile
          push: true
          tags: plugsy/agent:${{ needs.getversion.outputs.version }},plugsy/agent:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  postbuild:
    runs-on: ubuntu-latest
    needs: [getversion, buildcore, buildagent]
    if: needs.getversion.outputs.shouldBuild
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Run schemagen to ensure that the file gets included in the release
        run: yarn run gen:artifacts
      
      - name: Release to GitHub
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: add-bot
          GIT_AUTHOR_EMAIL: thomas@thenairn.com
          GIT_COMMITTER_NAME: add-bot
          GIT_COMMITTER_EMAIL: thomas@thenairn.com
        run: yarn run release

      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "https:\\/\\/github\\.com\\/plugsy\\/core\\/releases\\/download\\/(.*?)\\/core-config-schema\\.json"
          replace: "https://github.com/plugsy/core/releases/download/v${{ needs.getversion.outputs.version }}/core-config-schema.json"

      - name: Create Pull Request with updated package files
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): ${{ needs.getversion.outputs.version }}"
          committer: add-bot <thomas@thenairn.com>
          author: add-bot <thomas@thenairn.com>
          title: "chore(release): ${{ needs.getversion.outputs.version }}"
          body: "Version bump in package.json and yarn.lock for release [${{ needs.getversion.outputs.version }}](https://github.com/${{github.repository}}/releases/tag/v${{ needs.getversion.outputs.version }})"
          branch: version-bump/${{ needs.getversion.outputs.version }}
